/** mppt.c
 * Top level source file for MPPT EMS (STI assembly number 781-124-033 rev. 0)
 *
 * (c) 2018 Solar Technology Inc.
 * 7620 Cetronia Road
 * Allentown PA, 18106
 * 610-391-8600
 *
 * This code is for the exclusive use of Solar Technology Inc.
 * and cannot be used in its present or any other modified form
 * without prior written authorization.
 *
 * HOST PROCESSOR: STM32F410RBT6
 * Developed using STM32CubeF4 HAL and API version 1.18.0
 *
 * Baseline code was generated using STM32CubeMX version 4.23.0
 *
 *
 * REVISION HISTORY
 *
 * 1.0: 12/27/2017	Created By Nicholas C. Ipri (NCI) nipri@solartechnology.com
 */

#define ON		1
#define OFF		0

#define YES		1
#define NO		0

#include "stm32f4xx_hal.h"
#include "HD44780.h"
#include "mppt.h"

#include <string.h>


ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;

UART_HandleTypeDef huart1;

uint8_t strBuffer[64];

/** adcBuffer Description
 * 0: Battery Bank Voltage
 * 1: Solar Array Voltage
 * 2: Battery Bank Current
 * 3: Solar Array Current
 * 4: Battery Load Voltage
 * 6: Ambient Temperature
 * 7: MOSFET Temperature
 * 8: Battery Load Current
 */
uint16_t adcBuffer[9];

uint32_t vBattery;
uint32_t vSolarArray;
uint32_t iBattery;
uint32_t iSolarArray;
uint32_t vLoad;
uint32_t tempAmbient;
uint32_t tempMOSFETS;
uint32_t iLoad;

uint8_t getADC = 0;
uint8_t tim9Count = 9;
uint8_t lcdUpdate = 0;
uint8_t lcdWarning = 0;

// adcUnit = Vref / 2^12
//Vref = 3.3v and 2^12 = 4096 for 12 bits of resolution
const double adcUnit = 0.000806;
const double voltageDividerOutput = 0.0992;		// Voltage Divider ratio gives 0.0992 volts out / volt in

char logo[] 		= 	"SOLAR TECH";
char version[] 	= 	"VERSION 5.0";
char battery[] 	= 	"BATTERY BANK";
char battHi[] 	= 	"HI VOLTAGE";
char battLo[] 	= 	"LO VOLTAGE";

// System initialization functions
static void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_DMA_Init(void);

// TIM1 and TIM5 configuration
static void changePWM_TIM5(uint16_t);
static void changePWM_TIM1(uint16_t);

// Data Calculation functions
double calcVoltage(uint16_t ADvalue, uint8_t gain);
double calcCurrent(uint16_t ADvalue);
double calcTemperature(uint16_t value);
static uint16_t FloatVoltage(uint16_t);

//Digital Outputs: Switch Control Functions
void switchFan(uint8_t onOff);
void switchSolarArray(uint8_t onOff);
void switchLoad(uint8_t onOff);
void switchCharger(uint8_t onOff);
void switchChargeLED(uint8_t onOff);
void switchDiagLED(uint8_t onOff);

//LCD related functions
void lcdBatteryInfo(void);
void lcdSolarInfo(void);
void updateLCD(uint8_t whatToDisplay, uint8_t warning);

//Other Functions
static void getADCreadings(uint8_t);
void Error_Handler(void);


/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
  //__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
  //__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);


  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 // RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
//  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON; //RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;    //RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
   {
     Error_Handler();
   }

//  __HAL_RCC_PLL_ENABLE();

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 8;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_0;
 sConfig.Rank = 1;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_1;
 sConfig.Rank = 2;
 sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_2;
 sConfig.Rank = 3;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_3;
 sConfig.Rank = 4;
 sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_4;
 sConfig.Rank = 5;
 sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_6;
 sConfig.Rank = 6;
 sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES; //ADC_SAMPLETIME_28CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_7;
 sConfig.Rank = 7;
 sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_8;
 sConfig.Rank = 8;
 sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

}

//Generated 4 PWN channels that switch the DC-DC MOSFETs
static void MX_TIM1_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

//  TIM_OC_InitTypeDef sConfigOC;
// TIM_OC_InitTypeDef sConfigOC2;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0; //0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1024; //256;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  //if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  if (HAL_TIM_OnePulse_Init(&htim1, TIM_OPMODE_REPETITIVE) )
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;

  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_1;
  sBreakDeadTimeConfig.DeadTime = 128;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }

  	  HAL_TIM_MspPostInit(&htim1);

//  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
//  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
//  	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

  changePWM_TIM1(128);

}

// Controls PWM to the LCD backlight
static void MX_TIM5_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
//  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 32000;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  changePWM_TIM5(30000);

  HAL_TIM_MspPostInit(&htim5);
}

//Used as a 100 mS timer.
static void MX_TIM9_Init(void) {

	  TIM_ClockConfigTypeDef sClockSourceConfig;
	  TIM_MasterConfigTypeDef sMasterConfig;
//	  TIM_OC_InitTypeDef sConfigOC;

	  htim9.Instance = TIM9;
	  htim9.Init.Prescaler = 65535; //671;
	  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim9.Init.Period = 76; // 76 gives 100 mS period, 763 gives 1S period;
	  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  HAL_TIM_Base_Start_IT(&htim9);
}



/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;

  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
	HAL_NVIC_SetPriority(USART1_IRQn,0,0);
	HAL_NVIC_EnableIRQ(USART1_IRQn);
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
}


/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/

/* GPIOs for digital functions are configured here */
/* GPIOs for alternate functions are configured in stm32f4xx_hal_msp.h */
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

 //PORT C GPIOs
 //Pin 11 pings the external WDT, Pin 10 is the Charge LED,  Pin 9 controls SA_SWITCH,  Pins 6 - 0 control the LCD
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_10 | GPIO_PIN_9 | GPIO_PIN_6 |GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  // PORT B GPIOs: INPUTS
  //Pin 7: Power Good Input, Pin 8: OverVoltage Fault (OV_FAULT) input
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //PORT B GPIOs: OUTPUTS
  //Pin 1 controls BB_V+_Switch, Pin 2 for Fan Control, Pin 15 for the on-board Diagnostic LED
   GPIO_InitStruct.Pin = GPIO_PIN_15 |  GPIO_PIN_5 | GPIO_PIN_2 | GPIO_PIN_1;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}


/**
  * This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
  while(1) 
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
	  HAL_Delay(100);
  }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	//TIM9 is the 100 mS timer
	if (htim->Instance==TIM9)
	{

		// Do something every second
		if (tim9Count == 0)
		{
			getADC = 1;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			tim9Count = 9;
			lcdUpdate++;

			// Update the LECD display every 5 seconds
			if ( (lcdUpdate == 4) || (lcdUpdate == 9) || (lcdUpdate == 14) ) {

				updateLCD(lcdUpdate, lcdWarning);

				if (lcdUpdate > 14)
					lcdUpdate = 0;
			}
		}

		tim9Count--;
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11); // Ping the WDT
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {

	vBattery += adcBuffer[0];
	vSolarArray += adcBuffer[1];
	iBattery += adcBuffer[2];
	iSolarArray += adcBuffer[3];
	vLoad += adcBuffer[4];
	tempAmbient += adcBuffer[5];
	tempMOSFETS += adcBuffer[6];
	iLoad += adcBuffer[7];

}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.kjjjj
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

static void changePWM_TIM1(uint16_t pulse)
{


		TIM1->ARR = 0x512;
	  TIM_OnePulse_InitTypeDef sConfig;

	  sConfig.OCMode       = TIM_OCMODE_PWM1;
	    sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
	    sConfig.Pulse        = 128;
	    sConfig.ICPolarity   = TIM_ICPOLARITY_RISING;
	    sConfig.ICSelection  = TIM_ICSELECTION_DIRECTTI;
	    sConfig.ICFilter     = 0;
	    sConfig.OCNPolarity  = TIM_OCNPOLARITY_LOW;
	    sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
	    sConfig.OCNIdleState = TIM_OCNIDLESTATE_SET;


	    if (HAL_TIM_OnePulse_ConfigChannel(&htim1, &sConfig, TIM_CHANNEL_2, TIM_CHANNEL_1) != HAL_OK)
	    {
	    	Error_Handler();
	    }

//	    if (HAL_TIM_OnePulse_ConfigChannel(&htim1, &sConfig, TIM_CHANNEL_2, TIM_CHANNEL_1) != HAL_OK)
//	    {
//	    	Error_Handler();
//	    }

//	    if (HAL_TIM_OnePulse_ConfigChannel(&htim1, &sConfig, TIM_CHANNEL_2, TIM_CHANNEL_2) != HAL_OK)
//	    {
//	    	Error_Handler();
//	    }

	    HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_1);
	    HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_2);
//	    HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_3);
//	    HAL_TIM_OnePulse_Start(&htim1, TIM_CHANNEL_4);

/*
	  TIM_OC_InitTypeDef sConfigOC;
	  TIM_OC_InitTypeDef sConfigOC2;

	  // PWM Polarity normal LIA / LIB
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
	  //sConfigOC.Pulse = 16000;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
//	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
	  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
//	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;

	  // PWM Polarity complementary for HIA / HIB
	  sConfigOC2.OCMode = TIM_OCMODE_PWM1;
	  //sConfigOC2.Pulse = 16000;
	  sConfigOC2.OCPolarity = TIM_OCPOLARITY_LOW;
//	  sConfigOC2.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC2.OCFastMode = TIM_OCFAST_DISABLE;
	  sConfigOC2.OCIdleState = TIM_OCIDLESTATE_RESET;
//	  sConfigOC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;

	//PA8: (LIA)		DUTY - 20%
	  sConfigOC.Pulse = pulse - (pulse * 0.2);
//	 sConfigOC.Pulse = pulse;
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	  {
	    Error_Handler();
	  }

	 //PA9: (HIA)		DUTY
	  sConfigOC2.Pulse = pulse; //16000
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC2, TIM_CHANNEL_2) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  //PA10: (LIB)		DUTY - 20%
	  sConfigOC.Pulse = pulse - (pulse * 0.2);
//	  sConfigOC.Pulse = pulse;
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  //PA11: (HIB)		DUTY
	  sConfigOC2.Pulse = pulse;
	  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC2, TIM_CHANNEL_4) != HAL_OK)
	  {
	    Error_Handler();
	  }


//	  HAL_TIM_MspPostInit(&htim1);

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);

*/
}

// Controls the brightness of the LCD backlight
static void changePWM_TIM5(uint16_t pulse)
{

	 TIM_OC_InitTypeDef sConfigOC;

	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
	 sConfigOC.Pulse = pulse;
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	 if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	 {
	   Error_Handler();
	 }

	 HAL_TIM_MspPostInit(&htim5);

	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
}

static void getADCreadings (uint8_t howMany)
{

	uint8_t i;
//	uint8_t buffer2[16] = "";
	vBattery = 0;
	vSolarArray = 0;
	iBattery = 0;
	iSolarArray = 0;
	vLoad = 0;
	tempAmbient = 0;
	tempMOSFETS = 0;
	iLoad = 0;

//	memset(adcBuffer, 0, 8);

	//	ADC channel values are initialized above and new values are accumulated in HAL_ADC_ConvCpltCallback() after each loop
	//	(i.e.each completed conversion)
	for (i=howMany; i>0; i--)
	{
		if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 8) != HAL_OK)
			Error_Handler();
	}

	HAL_Delay(100);

	vBattery /= howMany;
	vSolarArray /= howMany;
	iBattery /= howMany;
	iSolarArray /= howMany;
	vLoad /= howMany;
	tempAmbient /= howMany;
	tempMOSFETS /= howMany;
	iLoad /= howMany;

	vBat = calcVoltage(vBattery, 1);
	vSolar = calcVoltage(vSolarArray, 1);
	iBat = calcCurrent(iBattery);
	iSolar = calcCurrent(iSolarArray);
	loadVoltage = calcVoltage(vLoad, 1);
	ambientTemp = calcTemperature(tempAmbient);
	mosfetTemp = calcTemperature(tempMOSFETS);
	loadCurrent = calcCurrent(iLoad);

	// This data is sent to the controller
	  sprintf(strBuffer, "MPPT ADC Value: %2.2f, %2.2f, %2.2f, %2.2f, %2.2f, %2.2f\r\n", vBat, iBat, vSolar, iSolar, loadVoltage, loadCurrent, ambientTemp, mosfetTemp);
	  HAL_UART_Transmit(&huart1, strBuffer, sizeof(strBuffer), 0xffff);

//	  sprintf(buffer2, "V: %2.2f", vBat);
//	  HD44780_WriteData(1, 3, buffer2);
}


/** returns appropriate float voltage calculated as:
 14.75 volts if temp < 0 degrees centigrade
 falls linearly to 13.35 volts
 (-35 mV/degree centigrade) at 40 gegrees centigrade
 falls linearly at -10 mV/degree centigrade above that
 */
static uint16_t FloatVoltage(uint16_t tempAmbient)
{
	if (tempAmbient < TEMP_0)
		return (TV_0);
	else if (tempAmbient < TEMP_40)
		return (TV_0 - ((tempAmbient - TEMP_0) * RATE1) / 100);
	else
		return (TV_40 - ((tempAmbient - TEMP_40) * RATE2) / 100);
}

double calcVoltage(uint16_t ADvalue, uint8_t gain)
{
	double voltage;
	voltage  = (ADvalue * adcUnit) / gain / voltageDividerOutput;
	return voltage;
}

double calcCurrent(uint16_t ADvalue)
{

	const uint8_t gain = 50;						// Gain of the INA213AIDCK current sense amplifier
	const double Rsense	=	0.002;					// Value of current sense resistors used in design.
	double current;

	current = (ADvalue * adcUnit) / gain / Rsense;

	return current;
}

double calcTemperature(uint16_t ADvalue)
{


	const double LM335voltage = 0.010;				// The LM335 outputs 10 mV / degree Kelvin
	const double kelvin = 273.15;					// 0 C = 273.15 K
	double degC;

	degC = ((ADvalue * adcUnit) / LM335voltage) - kelvin;

	return degC;
}

void switchFan(uint8_t onOff)
{

	if (onOff == ON)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, GPIO_PIN_RESET);
}

void switchSolarArray(uint8_t onOff)
{

	if (onOff == ON)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
}

void switchLoad(uint8_t onOff)
{

	if (onOff == ON)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
}

void switchCharger(uint8_t onOff)
{

	if (onOff == ON)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
}

void switchChargeLED(uint8_t onOff)
{

	if (onOff == ON)
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
}

void switchDiagLED(uint8_t onOff)
{

	if (onOff == ON)
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
	else
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
}

void lcdBatteryInfo(void)
{
	uint8_t tmp_buffer[16];

	HD44780_WriteData(0, 4, "BATTERY:", YES);
	sprintf(tmp_buffer, "%2.2f V, %2.2f A", vBat, iBat);
	HD44780_WriteData(1, 0, tmp_buffer, NO);
}

void lcdSolarInfo(void)
{
	uint8_t tmp_buffer[16];

	HD44780_WriteData(0, 0, "SOLAR ARRAY:", YES);
	sprintf(tmp_buffer, "%2.2f V, %2.2f A", vSolar, iSolar);
	HD44780_WriteData(1, 0, tmp_buffer, NO);
}

void updateLCD(uint8_t whatToDisplay, uint8_t warning)
{

	if (whatToDisplay == 4)
	{
		if (lcdWarning == 1)
		{
			HD44780_WriteData(0, 0, battery, YES);
			HD44780_WriteData(1, 0, battHi, NO);
		}

		else if (lcdWarning == 2)
		{

			HD44780_WriteData(0, 0, battery, YES);
			HD44780_WriteData(1, 0, battLo, NO);
		}

		else
		{
			HD44780_WriteData(0, 0, logo, YES);
			HD44780_WriteData(1, 0, version, NO);
		}
	}

	else if (whatToDisplay == 8)
	{
		lcdBatteryInfo();
	}

	else if (whatToDisplay == 12)
	{
		lcdSolarInfo();
	}
	else
	{

	}
}


int main(void)
{

//	uint8_t buffer[16] = "";
//	uint16_t duty = 1000;
//	uint16_t duty2 = 10;

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM1_Init();
  MX_TIM5_Init();
  MX_TIM9_Init();
  MX_USART1_UART_Init();

 // switchDiagLED(ON);


 //crc16_init();
 HD44780_Init();

// switchFan(OFF);
 switchCharger(ON);
 switchSolarArray(OFF); // Enable this ONLY when ready to charge, disable all other times.
 switchLoad(ON);
 switchChargeLED(ON);

 changePWM_TIM5(15000);
 changePWM_TIM1(512);

 getADCreadings(8);

 lcdBatteryInfo();

  while (1)
  {

// Get ADC readings
   if (getADC == 1)
	  {
		  getADC = 0;
		  getADCreadings(8);
	  }


//	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_15);
//	  HAL_Delay(100);

//	  sprintf(buffer, "Input: %c", myChar);
//	  HD44780_WriteData(0, 3, buffer);


//	  HAL_Delay(500);

//	  duty2 = duty2 + 10;

//	  if (duty2 >= 400)
//		  duty2 = 100;

//	  changePWM_TIM1(duty2);

  }
}

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
