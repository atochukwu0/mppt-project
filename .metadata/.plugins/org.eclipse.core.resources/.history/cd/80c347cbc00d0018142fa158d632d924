/**
  ******************************************************************************
  * File Name          : mppt.c
  * Description        : Main program body
  ******************************************************************************
  *
  * COPYRIGHT(c) 2017 STMicroelectronics
  *
  * Redistribution and use in source and binary forms, with or without modification,
  * are permitted provided that the following conditions are met:
  *   1. Redistributions of source code must retain the above copyright notice,
  *      this list of conditions and the following disclaimer.
  *   2. Redistributions in binary form must reproduce the above copyright notice,
  *      this list of conditions and the following disclaimer in the documentation
  *      and/or other materials provided with the distribution.
  *   3. Neither the name of STMicroelectronics nor the names of its contributors
  *      may be used to endorse or promote products derived from this software
  *      without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
  * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
  * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
  * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
  * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  *
  ******************************************************************************
  */
/* Includes ------------------------------------------------------------------*/
#include "stm32f4xx_hal.h"
#include "HD44780.h"
#include "mppt.h"

#include <string.h>


ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim11;

UART_HandleTypeDef huart1;
//WWDG_HandleTypeDef hwwdg;

uint8_t strBuffer[64];

/** adcBuffer Description
 * 0: Battery Bank Voltage
 * 1: Solar Array Voltage
 * 2: Battery Bank Current
 * 3: Solar Array Current
 * 4: Battery Load Voltage
 * 5: Ambient Temperature
 * 6: MOSFET Temperature
 * 7: Battery Load Current
 */
uint16_t adcBuffer[8];
uint8_t tim9Count = 9;

uint32_t vBattery;
uint32_t vSolarArray;
uint32_t iBattery;
uint32_t iSolarArray;
uint32_t vLoad;
uint32_t tempAmbient;
uint32_t tempMOSFETS;
uint32_t iLoad;

uint8_t getADC = 0;

// adcUnit = Vref / 2^12
//Vref = 3.3v and 2^12 = 4096 for 12 bits of resolution
static const double adcUnit = 0.000806;

void SystemClock_Config(void);
void Error_Handler(void);
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_TIM1_Init(void);
static void MX_TIM5_Init(void);
static void MX_TIM9_Init(void);

static void MX_TIM11_Init(void);

static void MX_USART1_UART_Init(void);
//static void MX_WWDG_Init(void);
static void MX_DMA_Init(void);

static void changePWM_TIM5(uint16_t);
static void changePWM_TIM1(uint16_t);


//static void getADCreadings(uint8_t);
static uint16_t FloatVoltage(uint16_t);

static void pulse();
void delay_nus(uint32_t);

extern void crc16_init(void);
extern uint16_t crc16(uint8_t[]);


/** System Clock Configuration
*/
void SystemClock_Config(void)
{

  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
  //__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
  //__HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_PLLCLK);


  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);


  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON; //RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 50; //100;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  RCC_OscInitStruct.PLL.PLLR = 2;

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;    //RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1; //RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
   {
     Error_Handler();
   }

//  __HAL_RCC_PLL_ENABLE();

  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);

  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
}

/* ADC1 init function */
static void MX_ADC1_Init(void)
{

  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
  hadc1.Init.ScanConvMode = ENABLE;
  hadc1.Init.ContinuousConvMode = DISABLE;
  hadc1.Init.DiscontinuousConvMode = DISABLE;
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc1.Init.NbrOfConversion = 8;
  hadc1.Init.DMAContinuousRequests = ENABLE;
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
  {
    Error_Handler();
  }

  /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_0;
 sConfig.Rank = 1;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_1;
 sConfig.Rank = 2;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_2;
 sConfig.Rank = 3;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_3;
 sConfig.Rank = 4;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_4;
 sConfig.Rank = 5;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_6;
 sConfig.Rank = 6;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_7;
 sConfig.Rank = 7;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

   /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
 sConfig.Channel = ADC_CHANNEL_8;
 sConfig.Rank = 8;
 sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 {
   Error_Handler();
 }

}

//Generated 4 PWN channels that switch the DC-DC MOSFETs
static void MX_TIM1_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig;

  TIM_OC_InitTypeDef sConfigOC;


  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 0; //0;
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 512; //256;
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

    sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
    sSlaveConfig.InputTrigger = TIM_TS_ITR0;
    if (HAL_TIM_SlaveConfigSynchronization(&htim1, &sSlaveConfig) != HAL_OK)
    {
    	Error_Handler();
    }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 16;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
  {
    Error_Handler();
  }

 HAL_TIM_MspPostInit(&htim5);

 changePWM_TIM1(128);

}

// Controls PWM to the LCD backlight
static void MX_TIM5_Init(void)
{

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
//  TIM_OC_InitTypeDef sConfigOC;

  htim5.Instance = TIM5;
  htim5.Init.Prescaler = 0;
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim5.Init.Period = 32000;
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }

  if (HAL_TIM_OC_Init(&htim5) != HAL_OK)
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }

  changePWM_TIM5(30000);

  HAL_TIM_MspPostInit(&htim5);
}

//Used as a 100 mS timer.
static void MX_TIM9_Init(void) {

	  TIM_ClockConfigTypeDef sClockSourceConfig;
	  TIM_MasterConfigTypeDef sMasterConfig;
	  TIM_OC_InitTypeDef sConfigOC;

	  htim9.Instance = TIM9;
	  htim9.Init.Prescaler = 65535; //100 mS;
	  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim9.Init.Period = 76; //10 mS;
	  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
	  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  if (HAL_TIM_OC_Init(&htim9) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  HAL_TIM_Base_Start_IT(&htim9);
}

//Used as a 10uS timer.
static void MX_TIM11_Init(void) {

	  TIM_ClockConfigTypeDef sClockSourceConfig;
	  TIM_MasterConfigTypeDef sMasterConfig;

	  htim11.Instance = TIM11;
	  htim11.Init.Prescaler = 4;
	  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
	  htim11.Init.Period = 25;
	  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
	  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ITR0; //TIM_CLOCKSOURCE_INTERNAL;
	  if (HAL_TIM_ConfigClockSource(&htim11, &sClockSourceConfig) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
	  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
	  if (HAL_TIMEx_MasterConfigSynchronization(&htim11, &sMasterConfig) != HAL_OK)
	  {
	    Error_Handler();
	  }

	  HAL_TIM_Base_Start_IT(&htim11);
}




/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;

  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
	HAL_NVIC_SetPriority(USART1_IRQn,0,0);
	HAL_NVIC_EnableIRQ(USART1_IRQn);
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
}

/* WWDG init function */
/* static void MX_WWDG_Init(void)
{

  hwwdg.Instance = WWDG;
  hwwdg.Init.Prescaler = WWDG_PRESCALER_8;
  hwwdg.Init.Window = 0x7f;
  hwwdg.Init.Counter = 0x7f;
  hwwdg.Init.EWIMode = WWDG_EWI_DISABLE;
//  if (HAL_WWDG_Init(&hwwdg) != HAL_OK)
//  {
//    Error_Handler();
//  }

} */

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);

}

/** Configure pins as 
        * Analog 
        * Input 
        * Output
        * EVENT_OUT
        * EXTI
*/
static void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

//PORT C GPIOs
 //Pin 11 pings the external WDT, Pin 9 controls SA_SWITCH, Pins 6 - 0 control the LCD
  GPIO_InitStruct.Pin = GPIO_PIN_11 | GPIO_PIN_9 | GPIO_PIN_6 |GPIO_PIN_5 | GPIO_PIN_4 | GPIO_PIN_3 | GPIO_PIN_2 | GPIO_PIN_1 |GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  //Pin 7: Power Good Input, Pin 8: OverVoltage Fault (OV_FAULT) input
  GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

//PORT B GPIOs
  //Pin 1 controls BB_V+_Switch, Pin 2 for Fan Control, Pin 15 for the on-board diagnostic LED and Pin 5 controls the SHDN to the 12v reg., pin 11 for desulfate
   GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_11 | GPIO_PIN_5 | GPIO_PIN_2 | GPIO_PIN_1;
   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
   GPIO_InitStruct.Pull = GPIO_NOPULL;
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
   HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);



  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);

}

//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1) {
//	HAL_UART_IRQHandler(huart1);
//}

/**
  * This function is executed in case of error occurrence.
  */
void Error_Handler(void)
{
  while(1) 
  {
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	  HAL_Delay(100);
  }
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	if (htim->Instance==TIM9)
	{
		tim9Count--;

		if (tim9Count == 0)
		{
			tim9Count = 4;
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_15);
			getADC = 1;
		}

//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_11);
//		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
	}

	else if (htim->Instance == TIM11)
	{
		if (usCounter != 0)
		usCounter--;
	}
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1) {

	vBattery += adcBuffer[0];
	vSolarArray += adcBuffer[1];
	iBattery += adcBuffer[2];
	iSolarArray += adcBuffer[3];
	vLoad += adcBuffer[4];
	tempAmbient += adcBuffer[5];
	tempMOSFETS += adcBuffer[6];
	iLoad += adcBuffer[7];

//	  sprintf(strBuffer, "MPPT ADC Values: %x %x %x %x %x %x %x %x\r\n", adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3], adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
//	  HAL_UART_Transmit(&huart1, strBuffer, sizeof(strBuffer), 0xffff);
}

#ifdef USE_FULL_ASSERT

/**
   * @brief Reports the name of the source file and the source line number
   * where the assert_param error has occurred.kjjjj
   * @param file: pointer to the source file name
   * @param line: assert_param error line source number
   * @retval None
   */
void assert_failed(uint8_t* file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
    ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */

}

#endif

static void changePWM_TIM1(uint16_t pulse)
{


	  TIM_OC_InitTypeDef sConfigOC;
	  sConfigOC.OCMode = TIM_OCMODE_PWM1;
	  sConfigOC.Pulse = pulse;
	  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
	  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
	  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
	  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	  {
		  Error_Handler();
	  }

	  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
	  {
		  Error_Handler();
	  }

	  HAL_TIM_MspPostInit(&htim1);

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
}

static void changePWM_TIM5(uint16_t pulse) {

	 TIM_OC_InitTypeDef sConfigOC;

	 sConfigOC.OCMode = TIM_OCMODE_PWM1;
	 sConfigOC.Pulse = pulse;
	 sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
	 sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
	 if (HAL_TIM_OC_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
	 {
	   Error_Handler();
	 }

//	 HAL_TIM_MspPostInit(&htim5);

	 HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
}

static void getADCreadings (uint8_t howMany) {

	uint8_t i;
	uint8_t buffer2[16] = "";

	vBattery = 0;
	vSolarArray = 0;
	iBattery = 0;
	iSolarArray = 0;
	vLoad = 0;
	tempAmbient = 0;
	tempMOSFETS = 0;
	iLoad = 0;

//	memset(adcBuffer, 0, 8);

//	ADC channel values are "zeroed" above and new values are accumulated in HAL_ADC_ConvCpltCallback() after each loop
//	(i.e.each completed conversion)
	for (i=howMany; i>0; i--) {
		if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 8) != HAL_OK)
			Error_Handler();
	}

	HAL_Delay(10);

	vBat = (vBattery / howMany) * adcUnit;
	vSolar = (vSolarArray / howMany) * adcUnit;
	iBat = (iBattery / howMany) * adcUnit;
	iSolar = (iSolarArray / howMany) * adcUnit;
	loadVoltage = (vLoad / howMany) * adcUnit;
	ambientTemp = (tempAmbient / howMany) * adcUnit;
	mosfetTemp = (tempMOSFETS / howMany) * adcUnit;
	loadCurrent = (iLoad / howMany) * adcUnit;

	sprintf(strBuffer, "MPPT ADC Values: %2.2f %2.2f %2.2f %2.2f %2.2f %2.2f %2.2f %2.2f\r\n", vBat, vSolar, iBat, iSolar, loadVoltage, ambientTemp, mosfetTemp, loadCurrent);
//	sprintf(strBuffer, "MPPT ADC Values: %x %x %x %x %x %% %x\r\n", adcBuffer[0], adcBuffer[1], adcBuffer[2], adcBuffer[3], adcBuffer[4], adcBuffer[5], adcBuffer[6], adcBuffer[7]);
	HAL_UART_Transmit(&huart1, strBuffer, sizeof(strBuffer), 0xffff);

	  sprintf(buffer2, "V: %2.2f", vBat);
	  HD44780_WriteData(1, 3, buffer2);
}


/** returns appropriate float voltage calculated as:
 14.75 volts if temp < 0 degrees centigrade
 falls linearly to 13.35 volts
 (-35 mV/degree centigrade) at 40 gegrees centigrade
 falls linearly at -10 mV/degree centigrade above that
 */
static uint16_t FloatVoltage(uint16_t tempAmbient)
{
	if (tempAmbient < TEMP_0)
		return (TV_0);
	else if (tempAmbient < TEMP_40)
		return (TV_0 - ((tempAmbient - TEMP_0) * RATE1) / 100);
	else
		return (TV_40 - ((tempAmbient - TEMP_40) * RATE2) / 100);
}

static void pulse()
{

	uint8_t i;

	for (i=0; i<=9; i++)
	{
		delay_nus(1);
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_11);
	}
}

void delay_nus(uint32_t usDelay)
{
	usCounter = usDelay;
	while (usCounter != 0);

}

int main(void)
{

	uint8_t buffer[16] = "";
	uint16_t duty = 1000;
	uint16_t duty2 = 10;

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* Configure the system clock */
  SystemClock_Config();

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_TIM1_Init();
  MX_TIM5_Init();
  MX_TIM9_Init();
  MX_TIM11_Init();
  MX_USART1_UART_Init();
  //MX_WWDG_Init();


// crc16_init();
 HD44780_Init();


// if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adcBuffer, 8) != HAL_OK)
//	 Error_Handler();

 //	 HAL_WWDG_Init(&hwwdg);

 changePWM_TIM1(256);

  while (1)
  {

//	  HAL_WWDG_Refresh(&hwwdg);

	  if (getADC == 1) {
		  getADC = 0;
		  getADCreadings(32);
	  }
//	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
//	  HAL_Delay(100);

	  sprintf(buffer, "Input: %c", myChar);
	  HD44780_WriteData(0, 3, buffer);
//
//	  HAL_WWDG_Refresh(&hwwdg);

	  HAL_Delay(500);
	  pulse();
/*
	  changePWM_TIM5(duty);
	  changePWM_TIM1(duty2);

	  duty += 1000;
	  duty2 += 10;

	  if (duty >= 30000)
		  duty = 1000;

	  if (duty2 >= 500)
		  duty2 = 10;
*/
  }
}

/**
  * @}
  */ 

/**
  * @}
*/ 

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
